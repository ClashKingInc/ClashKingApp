name: Test Secret Formats

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:  # Allows manual trigger

jobs:
  test-secrets:
    name: Detect Secret Formats
    runs-on: ubuntu-latest
    
    steps:
      - name: Test iOS Secrets Format
        env:
          P12_FILE: ${{ secrets.P12_FILE }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        run: |
          echo "üîç Testing iOS Secret Formats..."
          echo "========================================"
          
          # Test P12_FILE
          if [ -n "$P12_FILE" ]; then
            echo "üì± P12_FILE:"
            echo "  Length: ${#P12_FILE} characters"
            if [[ "$P12_FILE" =~ ^[A-Za-z0-9+/]*={0,2}$ ]] && [ ${#P12_FILE} -gt 100 ]; then
              echo "  ‚úÖ Format: BASE64 encoded"
            else
              echo "  ‚ùå Format: RAW content"
            fi
            echo "  First 50 chars: ${P12_FILE:0:50}..."
          else
            echo "üì± P12_FILE: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test P12_PASSWORD
          if [ -n "$P12_PASSWORD" ]; then
            echo "üîê P12_PASSWORD:"
            echo "  ‚úÖ SET (length: ${#P12_PASSWORD} characters)"
          else
            echo "üîê P12_PASSWORD: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test PROVISIONING_PROFILE
          if [ -n "$PROVISIONING_PROFILE" ]; then
            echo "üìÑ PROVISIONING_PROFILE:"
            echo "  Length: ${#PROVISIONING_PROFILE} characters"
            if [[ "$PROVISIONING_PROFILE" =~ ^[A-Za-z0-9+/]*={0,2}$ ]] && [ ${#PROVISIONING_PROFILE} -gt 100 ]; then
              echo "  ‚úÖ Format: BASE64 encoded"
            else
              echo "  ‚ùå Format: RAW content"
            fi
            echo "  First 50 chars: ${PROVISIONING_PROFILE:0:50}..."
          else
            echo "üìÑ PROVISIONING_PROFILE: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test App Store Connect API Key
          if [ -n "$APP_STORE_CONNECT_API_KEY" ]; then
            echo "üîë APP_STORE_CONNECT_API_KEY:"
            echo "  Length: ${#APP_STORE_CONNECT_API_KEY} characters"
            if [[ "$APP_STORE_CONNECT_API_KEY" =~ ^-----BEGIN.* ]]; then
              echo "  ‚úÖ Format: PEM format (.p8 content)"
            else
              echo "  ‚ùì Format: Unknown (should be .p8 file content)"
            fi
            echo "  First 50 chars: ${APP_STORE_CONNECT_API_KEY:0:50}..."
          else
            echo "üîë APP_STORE_CONNECT_API_KEY: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test API Key ID
          if [ -n "$APP_STORE_CONNECT_API_KEY_ID" ]; then
            echo "üÜî APP_STORE_CONNECT_API_KEY_ID:"
            echo "  ‚úÖ SET: $APP_STORE_CONNECT_API_KEY_ID"
          else
            echo "üÜî APP_STORE_CONNECT_API_KEY_ID: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test Issuer ID
          if [ -n "$APP_STORE_CONNECT_API_ISSUER_ID" ]; then
            echo "üè¢ APP_STORE_CONNECT_API_ISSUER_ID:"
            echo "  ‚úÖ SET: $APP_STORE_CONNECT_API_ISSUER_ID"
          else
            echo "üè¢ APP_STORE_CONNECT_API_ISSUER_ID: ‚ùå NOT SET"
          fi
          echo ""
          
          echo "========================================"
          echo "üéØ SUMMARY:"
          echo "========================================"
          
          # Provide recommendations
          if [ -n "$P12_FILE" ] && [[ "$P12_FILE" =~ ^[A-Za-z0-9+/]*={0,2}$ ]]; then
            echo "‚úÖ P12_FILE is base64 - workflow will decode it"
          elif [ -n "$P12_FILE" ]; then
            echo "‚ö†Ô∏è  P12_FILE is raw - workflow will use it directly"
          fi
          
          if [ -n "$PROVISIONING_PROFILE" ] && [[ "$PROVISIONING_PROFILE" =~ ^[A-Za-z0-9+/]*={0,2}$ ]]; then
            echo "‚úÖ PROVISIONING_PROFILE is base64 - workflow will decode it"
          elif [ -n "$PROVISIONING_PROFILE" ]; then
            echo "‚ö†Ô∏è  PROVISIONING_PROFILE is raw - workflow will use it directly"
          fi
          
          # Check if we have everything needed
          missing_secrets=()
          [ -z "$P12_FILE" ] && missing_secrets+=("P12_FILE")
          [ -z "$P12_PASSWORD" ] && missing_secrets+=("P12_PASSWORD")
          [ -z "$PROVISIONING_PROFILE" ] && missing_secrets+=("PROVISIONING_PROFILE")
          [ -z "$APP_STORE_CONNECT_API_KEY" ] && missing_secrets+=("APP_STORE_CONNECT_API_KEY")
          [ -z "$APP_STORE_CONNECT_API_KEY_ID" ] && missing_secrets+=("APP_STORE_CONNECT_API_KEY_ID")
          [ -z "$APP_STORE_CONNECT_API_ISSUER_ID" ] && missing_secrets+=("APP_STORE_CONNECT_API_ISSUER_ID")
          
          if [ ${#missing_secrets[@]} -eq 0 ]; then
            echo "üéâ All required secrets are set! TestFlight workflow should work."
          else
            echo "‚ùå Missing secrets: ${missing_secrets[*]}"
            echo "   Add these in GitHub ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions"
          fi