name: Test Secret Formats

on:
  push:
    branches:
      - chore/backend
  workflow_dispatch:  # Allows manual trigger

jobs:
  test-secrets:
    name: Detect Secret Formats
    runs-on: ubuntu-latest
    
    steps:
      - name: Test iOS Secrets Format
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        run: |
          echo "üîç Testing iOS Secret Formats..."
          echo "========================================"
          
          # Test IOS_CERTIFICATE_BASE64
          if [ -n "$IOS_CERTIFICATE_BASE64" ]; then
            echo "üì± IOS_CERTIFICATE_BASE64:"
            echo "  Length: ${#IOS_CERTIFICATE_BASE64} characters"
            
            # Test if it can be base64 decoded
            if echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > /tmp/test_p12.p12 2>/dev/null; then
              echo "  ‚úÖ Format: Valid BASE64 (can be decoded)"
              file_info=$(file /tmp/test_p12.p12 2>/dev/null || echo "unknown")
              echo "  üìÑ Content type: $file_info"
              rm -f /tmp/test_p12.p12
            else
              echo "  ‚ùå Format: RAW content (base64 decode failed)"
            fi
            echo "  First 50 chars: ${IOS_CERTIFICATE_BASE64:0:50}..."
          else
            echo "üì± IOS_CERTIFICATE_BASE64: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test IOS_CERTIFICATE_PASSWORD
          if [ -n "$IOS_CERTIFICATE_PASSWORD" ]; then
            echo "üîê IOS_CERTIFICATE_PASSWORD:"
            echo "  ‚úÖ SET (length: ${#IOS_CERTIFICATE_PASSWORD} characters)"
          else
            echo "üîê IOS_CERTIFICATE_PASSWORD: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test IOS_PROVISIONING_PROFILE_BASE64
          if [ -n "$IOS_PROVISIONING_PROFILE_BASE64" ]; then
            echo "üìÑ IOS_PROVISIONING_PROFILE_BASE64:"
            echo "  Length: ${#IOS_PROVISIONING_PROFILE_BASE64} characters"
            
            # Check length first (should be 10,000+ chars for real profile)
            if [ ${#IOS_PROVISIONING_PROFILE_BASE64} -lt 1000 ]; then
              echo "  ‚ö†Ô∏è  WARNING: Length seems too short for a real provisioning profile"
            fi
            
            # Test if it can be base64 decoded
            if echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > /tmp/test_profile.mobileprovision 2>/dev/null; then
              echo "  ‚úÖ Format: Valid BASE64 (can be decoded)"
              file_info=$(file /tmp/test_profile.mobileprovision 2>/dev/null || echo "unknown")
              echo "  üìÑ Content type: $file_info"
              
              # Check if it's a valid plist
              if command -v plutil >/dev/null 2>&1; then
                if plutil -lint /tmp/test_profile.mobileprovision >/dev/null 2>&1; then
                  echo "  ‚úÖ Valid plist structure"
                else
                  echo "  ‚ùå Invalid plist structure"
                fi
              fi
              rm -f /tmp/test_profile.mobileprovision
            else
              echo "  ‚ùå Format: RAW content (base64 decode failed)"
            fi
            echo "  First 50 chars: ${IOS_PROVISIONING_PROFILE_BASE64:0:50}..."
          else
            echo "üìÑ IOS_PROVISIONING_PROFILE_BASE64: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test App Store Connect API Key
          if [ -n "$APP_STORE_CONNECT_API_KEY" ]; then
            echo "üîë APP_STORE_CONNECT_API_KEY:"
            echo "  Length: ${#APP_STORE_CONNECT_API_KEY} characters"
            if [[ "$APP_STORE_CONNECT_API_KEY" =~ ^-----BEGIN.* ]]; then
              echo "  ‚úÖ Format: PEM format (.p8 content)"
            else
              echo "  ‚ùì Format: Unknown (should be .p8 file content)"
            fi
            echo "  First 50 chars: ${APP_STORE_CONNECT_API_KEY:0:50}..."
          else
            echo "üîë APP_STORE_CONNECT_API_KEY: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test API Key ID
          if [ -n "$APP_STORE_CONNECT_API_KEY_ID" ]; then
            echo "üÜî APP_STORE_CONNECT_API_KEY_ID:"
            echo "  ‚úÖ SET: $APP_STORE_CONNECT_API_KEY_ID"
          else
            echo "üÜî APP_STORE_CONNECT_API_KEY_ID: ‚ùå NOT SET"
          fi
          echo ""
          
          # Test Issuer ID
          if [ -n "$APP_STORE_CONNECT_API_ISSUER_ID" ]; then
            echo "üè¢ APP_STORE_CONNECT_API_ISSUER_ID:"
            echo "  ‚úÖ SET: $APP_STORE_CONNECT_API_ISSUER_ID"
          else
            echo "üè¢ APP_STORE_CONNECT_API_ISSUER_ID: ‚ùå NOT SET"
          fi
          echo ""
          
          echo "========================================"
          echo "üéØ SUMMARY:"
          echo "========================================"
          
          # Provide recommendations based on actual decode tests
          echo "üîß WORKFLOW COMPATIBILITY:"
          
          if [ -n "$IOS_CERTIFICATE_BASE64" ]; then
            if echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > /tmp/test_p12_final.p12 2>/dev/null; then
              echo "‚úÖ IOS_CERTIFICATE_BASE64: Workflow will decode as base64"
              rm -f /tmp/test_p12_final.p12
            else
              echo "‚úÖ IOS_CERTIFICATE_BASE64: Workflow will use as raw content"
            fi
          fi
          
          if [ -n "$IOS_PROVISIONING_PROFILE_BASE64" ]; then
            if echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > /tmp/test_profile_final.mobileprovision 2>/dev/null; then
              echo "‚úÖ IOS_PROVISIONING_PROFILE_BASE64: Workflow will decode as base64"
              rm -f /tmp/test_profile_final.mobileprovision
            else
              echo "‚úÖ IOS_PROVISIONING_PROFILE_BASE64: Workflow will use as raw content"
            fi
            
            # Special warning for short profiles
            if [ ${#IOS_PROVISIONING_PROFILE_BASE64} -lt 1000 ]; then
              echo "‚ö†Ô∏è  IOS_PROVISIONING_PROFILE_BASE64: May be corrupted or incomplete!"
              echo "   Normal profiles are 10,000+ characters. Consider re-uploading."
            fi
          fi
          
          # Check if we have everything needed
          missing_secrets=()
          [ -z "$IOS_CERTIFICATE_BASE64" ] && missing_secrets+=("IOS_CERTIFICATE_BASE64")
          [ -z "$IOS_CERTIFICATE_PASSWORD" ] && missing_secrets+=("IOS_CERTIFICATE_PASSWORD")
          [ -z "$IOS_PROVISIONING_PROFILE_BASE64" ] && missing_secrets+=("IOS_PROVISIONING_PROFILE_BASE64")
          [ -z "$APP_STORE_CONNECT_API_KEY" ] && missing_secrets+=("APP_STORE_CONNECT_API_KEY")
          [ -z "$APP_STORE_CONNECT_API_KEY_ID" ] && missing_secrets+=("APP_STORE_CONNECT_API_KEY_ID")
          [ -z "$APP_STORE_CONNECT_API_ISSUER_ID" ] && missing_secrets+=("APP_STORE_CONNECT_API_ISSUER_ID")
          
          if [ ${#missing_secrets[@]} -eq 0 ]; then
            echo "üéâ All required secrets are set! TestFlight workflow should work."
          else
            echo "‚ùå Missing secrets: ${missing_secrets[*]}"
            echo "   Add these in GitHub ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions"
          fi