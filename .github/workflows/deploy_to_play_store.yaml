name: Deploy to Play Store

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag to deploy (e.g., main, v1.0.0)'
        required: true
        default: 'main'
        type: string
      version:
        description: 'Version to deploy (e.g., 0.2.0-alpha) - only needed if not deploying a tag'
        required: false
        type: string
      track:
        description: 'Play Store track'
        required: true
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - production

jobs:
  store_deploy_android:
    name: Android Store Release
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: 21
      FLUTTER_VERSION: 3.32.4
      AAB_PATH: build/app/outputs/bundle/release/app-release.aab
      KEYSTORE_PATH: android/ck_key.jks
      KEY_PROPS_PATH: android/key.properties
      SERVICE_ACCOUNT_PATH: android/app/store_credentials.json
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      FLUTTER_ROOT: /opt/hostedtoolcache/flutter/stable-3.32.1-x64
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Extract version from release and generate build number
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Check if ref is a tag (starts with v) and no version provided
            if [[ "${{ github.event.inputs.ref }}" =~ ^v[0-9] ]] && [ -z "${{ github.event.inputs.version }}" ]; then
              # Extract version from tag name
              VERSION_NAME="${{ github.event.inputs.ref }}"
              VERSION_NAME=${VERSION_NAME#v}     # Remove "v" prefix
            elif [ -n "${{ github.event.inputs.version }}" ]; then
              # Use provided version
              VERSION_NAME="${{ github.event.inputs.version }}"
            else
              echo "Error: Version is required when not deploying a tag"
              exit 1
            fi
          else
            # Extract version from release tag
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            VERSION_NAME=${RELEASE_TAG#v}                # Remove "v" prefix if present
          fi

          # Remove alpha/beta suffixes for Play Store (required by Google)
          VERSION_NAME=$(echo "$VERSION_NAME" | sed 's/-alpha.*$//' | sed 's/-beta.*$//')
          echo "Cleaned version for Play Store: $VERSION_NAME"
          BUILD_NUMBER=$(date +%s)             # Generate build number based on timestamp
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          
      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ env.VERSION_NAME }}+${{ env.BUILD_NUMBER }}/" pubspec.yaml
          echo "Updated pubspec.yaml with version ${{ env.VERSION_NAME }}+${{ env.BUILD_NUMBER }}"
      
      - name: Verify updated pubspec.yaml
        run: cat pubspec.yaml

      - name: Setup Java to compile the Android project
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Create minimal local.properties
        run: |
          echo "sdk.dir=${{ env.ANDROID_SDK_ROOT }}" > android/local.properties

      - name: Accept Android SDK licenses
        run: |
          yes | ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Decode and create Android keystore
        run: echo "${{ secrets.KEY_STORE_FILE }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}

      - name: Create key.properties
        run: |
          echo "storeFile=${{ github.workspace }}/${{ env.KEYSTORE_PATH }}" > ${{ env.KEY_PROPS_PATH }}
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> ${{ env.KEY_PROPS_PATH }}
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> ${{ env.KEY_PROPS_PATH }}
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> ${{ env.KEY_PROPS_PATH }}

      - name: Decode Android Service Account
        run: echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}

      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run flutter pub get
        run: flutter pub get

      # - name: Analyze to check for bad Dart/Flutter practices
      #   run: flutter analyze

      # - name: Run all app tests
      #   run: flutter test

      - name: Build aab & Sign the release
        run: |
          flutter build appbundle --release \
            --build-number=${{ env.BUILD_NUMBER }} \
            --build-name=${{ env.VERSION_NAME }}

      - name: List output files for debugging
        run: ls -R build/app/outputs/bundle/release/

      - name: Upload generated aab to the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aab-stores
          path: build/app/outputs/bundle/release/app-release.aab

      - name: Determine track based on release type
        id: determine_track
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TRACK="${{ github.event.inputs.track }}"
          else
            # Determine track based on release tag
            RELEASE_TAG="${{ github.event.release.tag_name }}"

            if [[ "$RELEASE_TAG" == *"alpha"* ]]; then
              TRACK="alpha"
            elif [[ "$RELEASE_TAG" == *"beta"* ]]; then
              TRACK="beta"
            else
              TRACK="production"
            fi
          fi
          echo "TRACK=$TRACK" >> $GITHUB_ENV
          echo "Selected track: $TRACK"
          echo "Release tag: ${{ github.event.release.tag_name }}"

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ env.SERVICE_ACCOUNT_PATH }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: ${{ env.TRACK }}
          status: completed
          inAppUpdatePriority: 4
          whatsNewDirectory: update-news
