name: Deploy to TestFlight

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 0.2.0-alpha)'
        required: true
        type: string
      testflight_track:
        description: 'TestFlight track'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - external

jobs:
  deploy-ios:
    name: iOS TestFlight Release
    runs-on: macos-latest
    timeout-minutes: 60
    
    env:
      FLUTTER_VERSION: 3.32.4
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Extract version from tag
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION_NAME="${{ github.event.inputs.version }}"
          else
            TAG=${GITHUB_REF#refs/tags/}          # Extract "v1.0.0-alpha"
            VERSION_NAME=${TAG#v}                 # Remove "v" to get "1.0.0-alpha"
          fi
          
          # Remove alpha/beta suffixes for consistency with Android
          VERSION_NAME=$(echo "$VERSION_NAME" | sed 's/-alpha.*$//' | sed 's/-beta.*$//')
          echo "Cleaned version for TestFlight: $VERSION_NAME"
          BUILD_NUMBER=$(date +%s)              # Generate timestamp build number
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Deploying version: $VERSION_NAME ($BUILD_NUMBER)"

      - name: Update version in pubspec.yaml
        run: |
          sed -i '' "s/^version: .*/version: ${{ env.VERSION_NAME }}+${{ env.BUILD_NUMBER }}/" pubspec.yaml
          echo "Updated pubspec.yaml with version ${{ env.VERSION_NAME }}+${{ env.BUILD_NUMBER }}"

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Xcode signing
        run: |
          # Determine which certificates to use based on track
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.testflight_track }}" == "internal" ]; then
            TRACK="internal"
          elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == *"alpha"* ]]; then
            TRACK="internal"  
          else
            TRACK="external"
          fi
          
          if [ "$TRACK" == "internal" ]; then
            CERTIFICATE_BASE64="${{ secrets.IOS_DEV_CERTIFICATE_BASE64 }}"
            CERTIFICATE_PASSWORD="${{ secrets.IOS_DEV_CERTIFICATE_PASSWORD }}"
            PROVISIONING_PROFILE_BASE64="${{ secrets.IOS_DEV_PROVISIONING_PROFILE_BASE64 }}"
            SIGNING_IDENTITY="iPhone Developer"
            echo "Using Development certificates for Internal Testing"
          else
            CERTIFICATE_BASE64="${{ secrets.IOS_CERTIFICATE_BASE64 }}"
            CERTIFICATE_PASSWORD="${{ secrets.IOS_CERTIFICATE_PASSWORD }}"
            PROVISIONING_PROFILE_BASE64="${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}"
            SIGNING_IDENTITY="iPhone Distribution"
            echo "Using Distribution certificates for External Testing"
          fi
          
          # Create certificates directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Validate certificate data exists
          if [ -z "$CERTIFICATE_BASE64" ]; then
            echo "❌ ERROR: Certificate base64 data is empty"
            exit 1
          fi
          
          if [ -z "$CERTIFICATE_PASSWORD" ]; then
            echo "❌ ERROR: Certificate password is empty"
            exit 1
          fi
          
          # Decode and install certificate
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          
          # Verify certificate file was created and has content
          if [ ! -f certificate.p12 ] || [ ! -s certificate.p12 ]; then
            echo "❌ ERROR: Certificate file is empty or doesn't exist"
            ls -la certificate.p12 || echo "File not found"
            exit 1
          fi
          
          echo "✅ Certificate file created successfully ($(stat -f%z certificate.p12 2>/dev/null || stat -c%s certificate.p12) bytes)"
          
          # Create a new keychain
          security create-keychain -p "temppassword" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "temppassword" build.keychain
          
          # Import certificate with better error handling
          echo "🔐 Importing certificate..."
          if ! security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/xcodebuild; then
            echo "❌ ERROR: Failed to import certificate"
            echo "🔍 Troubleshooting info:"
            echo "  - Certificate file size: $(stat -f%z certificate.p12 2>/dev/null || stat -c%s certificate.p12) bytes"
            echo "  - Password length: ${#CERTIFICATE_PASSWORD}"
            echo "  - Trying to verify certificate format..."
            openssl pkcs12 -info -in certificate.p12 -noout -passin pass:"$CERTIFICATE_PASSWORD" || echo "  Certificate verification failed"
            exit 1
          fi
          echo "✅ Certificate imported successfully"
          
          # Set keychain search list
          security list-keychains -s build.keychain login.keychain
          security default-keychain -s build.keychain
          
          # Allow codesign to use the keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temppassword" build.keychain
          
          # Decode and install provisioning profile with proper UUID filename
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          UUID=$(grep -a -A 1 'UUID' profile.mobileprovision | grep -o '[A-F0-9\-]\{36\}' | head -1)
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          # Debug: List all provisioning profiles
          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Debug: Show certificate details
          echo "Available signing identities:"
          security find-identity -v -p codesigning build.keychain
          
          # Debug: Check profile details
          echo "Profile details:"
          /usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< $(security cms -D -i profile.mobileprovision)
          /usr/libexec/PlistBuddy -c "Print :ApplicationIdentifierPrefix" /dev/stdin <<< $(security cms -D -i profile.mobileprovision)

      - name: Build iOS app
        run: |
          # Set up code signing environment variables based on track
          if [ "${{ env.TESTFLIGHT_TRACK }}" == "internal" ]; then
            export CODE_SIGN_IDENTITY="iPhone Developer"
          else
            export CODE_SIGN_IDENTITY="iPhone Distribution"
          fi
          
          flutter build ios --release \
            --build-number=${{ env.BUILD_NUMBER }} \
            --build-name=${{ env.VERSION_NAME }} \
            --no-codesign

      - name: Build and Archive with xcodebuild
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist

      - name: Determine TestFlight track based on tag
        id: determine_track
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TESTFLIGHT_TRACK="${{ github.event.inputs.testflight_track }}"
            if [ "$TESTFLIGHT_TRACK" == "external" ]; then
              EXTERNAL_TESTING="true"
            else
              EXTERNAL_TESTING="false"
            fi
          else
            TAG=${GITHUB_REF#refs/tags/}
            if [[ "$TAG" == *"alpha"* ]]; then
              TESTFLIGHT_TRACK="internal"
              EXTERNAL_TESTING="false"
            elif [[ "$TAG" == *"beta"* ]]; then
              TESTFLIGHT_TRACK="external"
              EXTERNAL_TESTING="true"
            else
              TESTFLIGHT_TRACK="external"
              EXTERNAL_TESTING="true"
            fi
          fi
          echo "TESTFLIGHT_TRACK=$TESTFLIGHT_TRACK" >> $GITHUB_ENV
          echo "EXTERNAL_TESTING=$EXTERNAL_TESTING" >> $GITHUB_ENV
          echo "Selected TestFlight track: $TESTFLIGHT_TRACK"

      - name: Upload to TestFlight
        env:
          API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          API_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # Create API key file
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$API_PRIVATE_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$API_KEY_ID.p8
          
          # Upload to TestFlight
          xcrun altool --upload-app \
            --type ios \
            --file ios/build/Runner.ipa \
            --apiKey $API_KEY_ID \
            --apiIssuer $API_ISSUER_ID

      - name: Configure TestFlight Testing Groups (External Testing)
        if: env.EXTERNAL_TESTING == 'true'
        env:
          API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          API_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          echo "External testing enabled - build will be available for public beta testing"
          # Note: External testing requires manual approval from Apple
          # The build will appear in TestFlight but needs to be submitted for external testing review

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-ipa
          path: ios/build/Runner.ipa
