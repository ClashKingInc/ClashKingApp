
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: NestedScrollView(
        headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
          return <Widget>[
            Column(
              children: [
                Stack(
                  clipBehavior: Clip.none,
                  alignment: Alignment.bottomCenter,
                  children: <Widget>[
                    SizedBox(
                      height: 180,
                      child: ImageFiltered(
                        imageFilter: ImageFilter.blur(sigmaX: 1, sigmaY: 1),
                        child: ColorFiltered(
                          colorFilter: ColorFilter.mode(
                            Colors.black
                                .withOpacity(0.3), // Adjust opacity as needed
                            BlendMode.darken,
                          ),
                          child: Image.network(
                            "https://clashkingfiles.b-cdn.net/landscape/home-landscape.png",
                            width: double.infinity,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                    ),
                    Positioned(
                      bottom: -70,
                      child: Image.network(widget.playerStats.townHallPic,
                          width: 170),
                    ),
                    Positioned(
                      top: 10,
                      left: 10,
                      child: IconButton(
                        icon: Icon(Icons.arrow_back,
                            color: Theme.of(context).colorScheme.onPrimary,
                            size: 32),
                        onPressed: () => Navigator.of(context).pop(),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 64),
                ListTile(
                  title: Center(
                    child: Text(
                      widget.playerStats.name,
                      style: Theme.of(context).textTheme.titleLarge,
                    ),
                  ),
                  subtitle: Center(
                    child: InkWell(
                      onTap: () {
                        FlutterClipboard.copy(widget.playerStats.tag)
                            .then((value) {
                          final snackBar = SnackBar(
                            content: Text('Copied to Clipboard'),
                          );
                          ScaffoldMessenger.of(context).showSnackBar(snackBar);
                        });
                      },
                      child: Container(
                        padding: EdgeInsets.all(8.0), // Add padding if needed
                        child: Text(widget.playerStats.tag),
                      ),
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.only(left: 8.0, right: 8.0),
                  child: Wrap(
                    alignment: WrapAlignment.center,
                    spacing: 8.0,
                    runSpacing: 0,
                    children: [
                      Chip(
                        avatar: Icon(LucideIcons.shield),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          widget.playerStats.clan.name,
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.user),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          widget.playerStats.role,
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.star),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.warStars}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.arrowBigUp),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.expLevel}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.chevronUp),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.donations}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.chevronDown),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.donationsReceived}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.percent),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${(widget.playerStats.donations / widget.playerStats.donationsReceived * 100).toStringAsFixed(2)}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                    ],
                  ),
                ),
                TabBar(
                  controller: tabController,
                  tabs: [Tab(text: 'Home Base'), Tab(text: 'Builder Base')],
                ),
              ],
            ),
          ];
        },
        body: TabBarView(
          controller: tabController,
          children: [
            // Home Base tab
            Column(
              children: [
                Padding(
                  padding: const EdgeInsets.only(left: 8.0, right: 8.0),
                  child: Wrap(
                    alignment: WrapAlignment.center,
                    spacing: 8.0,
                    runSpacing: 0,
                    children: [
                      Chip(
                        avatar: Icon(LucideIcons.shield),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          widget.playerStats.clan.name,
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.user),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          widget.playerStats.role,
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.star),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.warStars}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.arrowBigUp),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.expLevel}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.chevronUp),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.donations}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.chevronDown),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${widget.playerStats.donationsReceived}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                      Chip(
                        avatar: Icon(LucideIcons.percent),
                        labelPadding: EdgeInsets.only(left: 2.0, right: 2.0),
                        label: Text(
                          '${(widget.playerStats.donations / widget.playerStats.donationsReceived * 100).toStringAsFixed(2)}',
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      ),
                    ],
                  ),
                ),
                ListTile(
                  title: Text(
                      'Town Hall Level: ${widget.playerStats.townHallLevel}'),
                ),
                ListTile(
                  title: Text('Trophies: ${widget.playerStats.trophies}'),
                ),
                ExpansionTile(
                  title: Text('Heroes'),
                  children: widget.playerStats.heroes
                      .where((hero) => hero.village == 'home')
                      .map((hero) => ListTile(
                            title: Text(hero.name),
                            subtitle:
                                Text('Level: ${hero.level} / ${hero.maxLevel}'),
                          ))
                      .toList(),
                ),
                ExpansionTile(
                  title: Text('Troops'),
                  children: widget.playerStats.troops
                      .where((troop) =>
                          troop.village == 'home' &&
                          !troop.name.startsWith('Super'))
                      .map((troop) => ListTile(
                            title: Text(troop.name),
                            subtitle: Text(
                                'Level: ${troop.level} / ${troop.maxLevel} - ${troop.village}'),
                          ))
                      .toList(),
                ),
                ExpansionTile(
                  title: Text('Spells'),
                  children: widget.playerStats.spells
                      .map((spell) => ListTile(
                            title: Text(spell.name),
                            subtitle: Text(
                                'Level: ${spell.level} / ${spell.maxLevel} - ${spell.village}'),
                          ))
                      .toList(),
                ),
              ],
            ),

            // Builder Base tab
            Column(
              children: [
                ListTile(
                  title: Text(
                      'Builder Hall Level: ${widget.playerStats.builderHallLevel}'),
                ),
                ListTile(
                  title: Text(
                      'Builder Base Trophies: ${widget.playerStats.builderBaseTrophies}'),
                ),
                ExpansionTile(
                  title: Text('Heroes'),
                  children: widget.playerStats.heroes
                      .where((hero) => hero.village == 'builderBase')
                      .map((hero) => ListTile(
                            title: Text(hero.name),
                            subtitle:
                                Text('Level: ${hero.level} / ${hero.maxLevel}'),
                          ))
                      .toList(),
                ),
                ExpansionTile(
                  title: Text('Troops'),
                  children: widget.playerStats.troops
                      .where((troop) => troop.village == 'builderBase')
                      .map((troop) => ListTile(
                            title: Text(troop.name),
                            subtitle: Text(
                                'Level: ${troop.level} / ${troop.maxLevel} - ${troop.village}'),
                          ))
                      .toList(),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
