
/*
  Widget buildEventsTab(BuildContext context) {
    // Étape 1: Rassembler toutes les attaques en une seule liste.
    List<Map<String, dynamic>> allAttacks = [];
    widget.currentWarInfo.clan.members.forEach((member) {
      member.attacks?.forEach((attack) {
        allAttacks.add({
          "attackerName": member.name,
          "defenderName": getPlayerNameByTag(attack.defenderTag),
          "mapPosition": getPlayerMapPositionByTag(attack.defenderTag),
          "stars": attack.stars,
          "destructionPercentage": attack.destructionPercentage,
          "order": attack.order,
          "isClanMember": true, // Ajouté pour identifier si l'attaquant est un membre du clan
        });
      });
    });
    widget.currentWarInfo.opponent.members.forEach((member) {
      member.attacks?.forEach((attack) {
        allAttacks.add({
          "attackerName": member.name,
          "defenderName": getPlayerNameByTag(attack.defenderTag),
          "mapPosition": getPlayerMapPositionByTag(attack.defenderTag),
          "stars": attack.stars,
          "destructionPercentage": attack.destructionPercentage,
          "order": attack.order,
          "isClanMember": false, // L'attaquant est un membre de l'opposant
        });
      });
    });

    // Étape 2: Trier les attaques par ordre décroissant basé sur "order".
    allAttacks.sort((a, b) => b["order"].compareTo(a["order"]));

    // Étape 3: Utiliser ListView.builder pour afficher les attaques.
    return ListView.builder(
      shrinkWrap: true,
      physics: ClampingScrollPhysics(),
      itemCount: allAttacks.length,
      itemBuilder: (context, index) {
        var attack = allAttacks[index];
        return Container(
          padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
          color: Colors.grey[200], // Changez la couleur de fond si nécessaire
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: <Widget>[
              // Informations sur l'attaquant ou le défenseur
              Expanded(
                child: Text(
                  attack["isClanMember"] ? "${attack["mapPosition"]}. ${attack["attackerName"]}" : attack["defenderName"],
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                ),
              ),
              // Étoiles et pourcentage de destruction
              Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  ...List.generate(3, (index) => Icon(
                    index < attack["stars"] ? Icons.star : Icons.star_border,
                    color: index < attack["stars"] ? Colors.yellow : Colors.grey,
                    size: 14,
                  )),
                  Text(' ${attack["destructionPercentage"]}%', style: TextStyle(fontSize: 14),),
                ],
              ),
              // Flèche indiquant la direction de l'attaque
              Icon(
                attack["isClanMember"] ? Icons.arrow_forward : Icons.arrow_back,
                color: Colors.grey,
              ),
              // Informations sur le défenseur ou l'attaquant
              Expanded(
                child: Text(
                  attack["isClanMember"] ? attack["defenderName"] : "${attack["mapPosition"]}. ${attack["attackerName"]}",
                  textAlign: attack["isClanMember"] ? TextAlign.right : TextAlign.left,
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                ),
              ),
            ],
          ),
        );
      },
    );
  }*/